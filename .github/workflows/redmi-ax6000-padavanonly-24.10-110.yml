###############改名字##############
name: redmi-ax6000-padavanonly-24.10-110

permissions: write-all
# 开启写权限，防止无法上传到release

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
#  schedule:
#    - cron: 0 16 * * *

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: 2410
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: redmi-ax6000/padavanonly-24.10-110/config/default.config
  DIY_P1_SH: redmi-ax6000/padavanonly-24.10-110/diy/diy-part1.sh
  DIY_P2_SH: redmi-ax6000/padavanonly-24.10-110/diy/diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  ###############改名字##############
  OPENWRT_NAME: AX6000

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: 检查项目分支
      uses: actions/checkout@main
      
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 清理磁盘空间(Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # when set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: false
        dotnet: false
        haskell: false
        large-packages: false
        swap-storage: false
        
    - name: 下载固件源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 加载feeds.conf.default & DIY_P1_SH
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 更新 & 安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 加载config & DIY_P2_SH
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: 检查配置文件格式
      run: |
        cd openwrt
        echo "===== 检查配置文件格式 ====="
        # 检查配置文件是否有语法错误
        grep -n "missing separator" .config || echo "未发现明显的语法错误"
        # 检查是否有重复的配置项
        echo "===== 检查重复配置项 ====="
        cat .config | sort | uniq -c | sort -nr | head -20
        # 显示配置文件的行数
        echo "配置文件总行数: $(wc -l < .config)"
        
    - name: SSH链接管理
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
    - name: 下载安装包
      id: package
      run: |
        cd openwrt
        echo "===== 开始配置 ====="
        cat .config | head -n 20
        echo "===== 配置文件前20行 ====="
        make defconfig
        echo "===== defconfig 完成 ====="
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo "===== 开始编译 ====="
        echo -e "$(nproc) thread compile"
        # 添加详细的编译日志输出并保存到文件
        make -j$(nproc) V=s 2>&1 | tee compile.log || make -j1 V=s 2>&1 | tee -a compile.log
        # 如果编译失败，保存最后100行日志
        if [ $? -ne 0 ]; then
          echo "===== 编译失败，保存错误日志 ====="
          tail -n 100 compile.log > compile_error.log
          echo "status=fail" >> $GITHUB_OUTPUT
        else
          echo "===== 编译成功 ====="
          echo "status=success" >> $GITHUB_OUTPUT
        fi
        # 输出编译结果目录结构
        echo "===== 编译结果目录结构 ====="
        ls -la bin/targets/ || echo "targets 目录不存在"
        find bin/targets/ -type d -exec ls -la {} \; || echo "无法列出目标目录"
        # 检查设备名称
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/'|sed -n '1p' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "===== 设备名称 ====="
        cat DEVICE_NAME || echo "无法获取设备名称"
        echo $GITHUB_ENV
        # 检查目标名称
        echo "===== 目标名称提取 ====="
        grep '^CONFIG_TARGET.*=y' .config | grep DEVICE | head -n 5
        grep '^CONFIG_TARGET.*=y' .config | sed -r 's/.*TARGET_(.*)_DEVICE_.*=y/\1/' | sed -n '1p' > TARGET_NAME
        [ -s TARGET_NAME ] && echo "TARGET_NAME=$(cat TARGET_NAME)" >> $GITHUB_ENV
        echo "TARGET_NAME文件内容: $(cat TARGET_NAME || echo '文件为空')"
        echo $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: |
        echo "===== 磁盘使用情况 ====="
        df -hT
        echo "===== 编译输出目录 ====="
        du -h -d 2 openwrt/bin/ || echo "bin 目录不存在"
      
        - name: 整理文件并重命名
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
        run: | 
          echo "===== 开始整理文件 ====="
          # 检查目标目录是否存在
          if [ -d openwrt/bin/targets/*/* ]; then
            echo "目标目录存在，继续处理"
            cd openwrt/bin/targets/*/*
            echo "当前目录: $(pwd)"
            echo "目录内容 (重命名前):"
            ls -la
            # 查找所有固件文件
            echo "固件文件 (重命名前):"
            find . -name "*.bin" -o -name "*.img" -o -name "*.gz" | grep -v packages
            
            rm -rf packages
            echo "已删除 packages 目录"
            
            # 安装重命名工具
            echo "===== 安装重命名工具 ====="
            sudo -E apt-get -qq update
            sudo -E apt-get -qq install rename || sudo -E apt-get -qq install prename || sudo -E apt-get -qq install perl
            
            # 检查重命名工具
            echo "===== 检查重命名工具 ====="
            which rename || which prename || echo "未找到重命名工具"
            
            # 执行重命名
            echo "===== 执行重命名 ====="
            if command -v rename >/dev/null 2>&1; then
              echo "使用 rename 命令"
              rename 's/.*-/-AX6000-/' *
              rename 's/ax6000/ax6000-spi_nand-110m/' *
            elif command -v prename >/dev/null 2>&1; then
              echo "使用 prename 命令"
              prename 's/.*-/-AX6000-/' *
              prename 's/ax6000/ax6000-spi_nand-110m/' *
            else
              echo "使用 for 循环和 mv 命令"
              for file in *; do
                echo "处理文件: $file"
                new_name=$(echo "$file" | sed "s/.*-/-AX6000-/")
                if [ "$file" != "$new_name" ]; then
                  echo "重命名: $file -> $new_name"
                  mv "$file" "$new_name"
                fi
              done
              for file in *; do
                echo "处理文件: $file"
                new_name=$(echo "$file" | sed "s/ax6000/ax6000-spi_nand-110m/")
                if [ "$file" != "$new_name" ]; then
                  echo "重命名: $file -> $new_name"
                  mv "$file" "$new_name"
                fi
              done
            fi
            
            # 显示重命名后的文件
            echo "===== 重命名后的文件 ====="
            ls -la
            # 查找所有固件文件
            echo "固件文件 (重命名后):"
            find . -name "*.bin" -o -name "*.img" -o -name "*.gz" | grep -v packages
            
            echo "FIRMWARE=$PWD" >> $GITHUB_ENV
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "固件目录不存在，可能是编译失败" 
            echo "查看 openwrt/bin 目录结构:"
            find openwrt/bin -type d | sort
            echo "status=fail" >> $GITHUB_OUTPUT
          fi
          echo $GITHUB_ENV
          echo $GITHUB_OUTPUT
        
    - name: 上传固件到github
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-redmi-ax6000-padavanonly-24.10-110
        path: ${{ env.FIRMWARE }}

        
    - name: 生成release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.OPENWRT_NAME }}-xiaomi_redmi-router-ax6000-${{ env.FILE_DATE }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "由衷感谢所有为openwrt无私奉献的大佬们" >> release.txt
        echo " 固件 ip 192.168.1.1" >> release.txt
        echo " 固件类型: 110MB" >> release.txt
        echo " 固件源码地址来自: padavanonly-24.10-110" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 发布至release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: redmi-ax6000-${{ env.OPENWRT_NAME }}-${{ env.FILE_DATE }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt

    - name: 发布至release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          ${{ env.FIRMWARE }}/*.bin
          ${{ env.FIRMWARE }}/*.img
          ${{ env.FIRMWARE }}/*.gz
          ${{ env.FIRMWARE }}/*.buildinfo
          ${{ env.FIRMWARE }}/*.manifest
        name: redmi-ax6000-${{ env.OPENWRT_NAME }}-${{ env.FILE_DATE }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt